
Play cycle                                # GameController#play

   Game.new Set up the game             # Game#initialize
              Create a couple of players  # Game => Player#new
              Set player pieces           # Player#initialize
            Create blank board            # Board#inititialize
            Welcome/ instructions         # UserInterfaceView

   Game.run     Turn cycle                # Game#turn_cycle
                Render board              # BoardController#render => BoardView.display(board)
                get player move (column)  # Player#get_move
                unless quit?              # Game#quit
                  validate move           # Game#valid_move?
                Update board              # BoardController#add_piece
                switch active player      # Game#update_active_player
                Break if winner || draw   # Game => Board


Play again?                               # GameController#play_again?

GameController :: sending messages to the ConnectFour

executable -> ConnectFourLauncher

Launch game -> GameController
  welcome message -> GameView
  print instructions -> GameView
  turn loop -> GameController
    render -> BoardController -> BoardView
    get user input -> GameView#print prompt
                      Player.get_move
                        Listener - get data
                        GameController -> quit, ask ConnectFour if valid?
                      GameController -> ConnectFour#place_piece  -> Board.set_cell
    switch active player -> GameController
  game_over? -> GameController ask ConnectFour.over? -> look at board data
end game -> Gameview print  -> ConnectFour.outcome
                                ask ConnectFour.win? || draw? -> look at board data

play_again?                   GameController
  print play again message -> GameView
  get user input -> GameView#print prompt
                  Player.get_input
                    Listener - get data
                    GameController -> quit, ask GameController if valid?





